local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
 
-- Aimbot Settings
local AIMBOT_FOV = 150  -- Controlled FOV radius
local HEADSHOT_PRIORITY = true  -- True = Prefers headshots
local WALL_CHECK = true  -- True = Won't shoot through walls
local TEAM_CHECK = true  -- True = Won't target teammates
local aimbotActive = false  -- Aimbot only activates on RBM
 
-- WWII-Themed Notifications
local ww2Messages = {
    "☠️ Omaha Beach Secured! Aimbot Online! ☠️",
    "🪖 Operation Overlord Activated! 🪖",
    "💀 Panzerfaust Engaged! No Survivors! 💀",
    "🔥 D-DAY STORM ACTIVE! LOCKING HEADSHOTS! 🔥",
    "🎯 Bulletstorm Deployed! Enemy Forces Eliminated! 🎯",
    "💣 Normandy Invasion Success! Aimbot Ready! 💣"
}
 
-- Function to send notification
local function sendNotification()
    StarterGui:SetCore("SendNotification", {
        Title = "⚡ D-DAY AIMBOT ENGAGED ⚡",
        Text = ww2Messages[math.random(1, #ww2Messages)],
        Duration = 5  -- Display for 5 seconds
    })
end
 
-- Function to check if the target is alive
local function IsPlayerAlive(player)
    return player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0
end
 
-- Function to check if enemy is valid
local function GetTarget()
    local bestTarget = nil
    local closestDist = AIMBOT_FOV
 
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") and IsPlayerAlive(player) then
            -- Team Check
            if TEAM_CHECK and player.Team == LocalPlayer.Team then
                continue  -- Skip teammates
            end
 
            local targetPart = player.Character:FindFirstChild("Head") or player.Character:FindFirstChild("HumanoidRootPart")
            if targetPart then
                local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
                local mousePos = UserInputService:GetMouseLocation()
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
 
                -- Check if within FOV
                if onScreen and distance < closestDist then
                    if WALL_CHECK then
                        local ray = Ray.new(Camera.CFrame.Position, (targetPart.Position - Camera.CFrame.Position).unit * 1000)
                        local hit, _ = workspace:FindPartOnRay(ray, LocalPlayer.Character)
 
                        if hit and hit:IsDescendantOf(player.Character) then
                            bestTarget = targetPart
                            closestDist = distance
                        end
                    else
                        bestTarget = targetPart
                        closestDist = distance
                    end
                end
            end
        end
    end
    return bestTarget
end
 
-- Toggle Aimbot with Right Mouse Button
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aimbotActive = true
    end
end)
 
UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aimbotActive = false
    end
end)
 
-- No Recoil and No Spread
local function NoRecoilAndNoSpread()
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("Humanoid") then
        local humanoid = character.Humanoid
        local tool = character:FindFirstChildWhichIsA("Tool")
        if tool then
            if tool:FindFirstChild("Recoil") then
                tool.Recoil.Value = 0
            end
            if tool:FindFirstChild("Spread") then
                tool.Spread.Value = 0
            end
        end
    end
end
 
-- Auto-Reload Function
local function AutoReload()
    local character = LocalPlayer.Character
    if character then
        local tool = character:FindFirstChildWhichIsA("Tool")
        if tool and tool:FindFirstChild("Ammo") then
            if tool.Ammo.Value <= 0 then  -- If ammo reaches 0
                tool:FindFirstChild("ReloadEvent"):FireServer()  -- Trigger reload
                sendNotification()  -- Send notification when reloading
            end
        end
    end
end
 
-- Draw FOV Circle
local fovCircle = Drawing.new("Circle")
fovCircle.Color = Color3.fromRGB(255, 255, 255) -- White color
fovCircle.Radius = AIMBOT_FOV -- FOV Radius
fovCircle.Transparency = 0.7 -- Transparency level (0 = fully opaque, 1 = fully transparent)
fovCircle.Filled = false -- Don't fill the circle
fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2) -- Center the circle
 
-- Aimbot Loop (Only activates when holding RBM)
RunService.RenderStepped:Connect(function()
    fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2) -- Update FOV position
 
    if aimbotActive then
        local target = GetTarget()
        if target then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Position)
        end
        NoRecoilAndNoSpread()  -- Apply No Recoil and No Spread
        AutoReload()  -- Check and reload if needed
    end
end)
 
-- Send WWII-themed notification when script executes
sendNotification()
